@charset "UTF-8";

@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');

@font-face {
    font-family: 'Android';
    src: url(idroid.otf) format('opentype');
    font-weight: normal;
    font-style: normal;
}

/** Paleta de Cores que foram usadas nesse site: */
/*

#c5ebd6;
#83e1ad;
#3ddc84;
#2fa866;
#1a5c37;
#063d1e;

*/

/** Com esse "ROOT" aqui e como j√° diz o nome, √© uma raiz do site inteiro e ela √© uma "VARI√ÅVEL". E a vari√°vel √© criada ao colocar os dois tracinhos conforme voc√™ consegue ver abaixo. Caso o cliente queira mudar a cor de alguma coisa no site no futuro(ou voc√™ mesmo), s√≥ vir aqui no ROOT e colocar a cor desejada que isso vai alterar a cor de todos os elementos que est√£o com essa vari√°vel aplicado nela!! */

:root{
    --cor0: #c5ebd6;
    --cor1: #83e1ad;
    --cor2: #3ddc84;
    --cor3: #2fa866;
    --cor4: #1a5c37;
    --cor5: #063d1e;

    --fonte-padrao: Arial, Verdana, Helvetica, sans-serif;
    --fonte-destaque: 'Bebas Neue', Arial, Helvetica, sans-serif;
    --fonte-android: 'Android', Arial, Helvetica, sans-serif;
}

/** Aqui vai fazer com que todos as boxes(caixas) n√£o tenham margin e nem padding. A n√£o ser que voc√™ abra um seletor e configure ele pessoalmente como eu fiz ali no HEADER> H1 mais em baixo que tem um PADDING-TOP. */
*{
    margin: 0px;
    padding: 0px;
}

body{
    background-image: linear-gradient(to bottom, rgb(184, 233, 184), rgba(255, 255, 255, 0.116));
    font-family: var(--fonte-padrao);
    min-height: 200px;
}

header{
    background-image: linear-gradient(to bottom, var(--cor3), var(--cor5));
    text-align: center;
    padding: 50px 0px 50px 0px;

}

/** Aqui eu deixei tanto o "font-family" e o shorthand "font" para dar uma olhada futuramente mas como j√° coloquei a vari√°vel, n√£o preciso do font-family. */
header h1{
    font-family: var(--fonte-destaque);
    font: normal 3.5em 'Bebas Neue', Arial, Helvetica, sans-serif;
    color: white;
    text-shadow: 02px 03px 02px rgba(0, 0, 0, 0.555);
    
}

/** Se observar aqui, usei o shorthand pro "FONT" e cooloquei a "VAR"(vari√°vel) e consegui ocupar menos espa√ßo no c√≥digo.*/
header p{
    color: white;
    font: normal normal 1.2em var(--fonte-padrao);
    padding: 0px 10px 0px 10px;
    text-shadow: 02px 03px 02px rgba(0, 0, 0, 0.568);
    
}

nav{
    background-color: var(--cor5);
    padding: 10px;
    box-shadow: 0px 07px 07px rgba(0, 0, 0, 0.26);
}

nav > a{
    text-decoration: none;
    color: white;
    font-weight: bold;
    padding: 10px;  
}

/** Esse "TRANSITION-DURATION" vai dizer quanto tempo demora para aparecer os efeitos que coloquei ao passar o mouse em cima "hover" */
nav > a:hover{
    background-color: var(--cor3);
    color: var(--cor5);
    border-radius: 04px;
    transition-duration: 0.5s;
}



main{
    background-color: white;
    min-width: 250px;
    max-width: 1050px;
    margin: auto;
    padding: 20px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.219);
    margin-bottom: 20px;
    border-radius: 0px 0px 10px 10px;
}

main h1{
    color: var(--cor5);
    font-family: var(--fonte-android);
    font-size: 1.8em;
    font-weight: normal;
}

main h2{
    font: normal normal 1.5em 'Android', Arial, Helvetica, serif;
    color: var(--cor4);
    background-image: linear-gradient(to right, var(--cor1), transparent);
    text-indent: 6px;
}

/** O "line-height" vai determinar o tamanho do espa√ßamento entre cada linha. 1 √© o padr√£o e dois √© o ideal pelo menos nesse caso. */
main p{
    text-indent: 30px;
    padding: 10px;
    margin: 15px 0px 15px 0px;
    text-align: justify;
    line-height: 2em;
}

/** Esse "width 100%" vai deixar o conteudo pegando 100% do width que voc√™ colocou no main. Isso vai fazer com que ele ocupe 100% do espa√ßo. */
main img{
    width: 100%;
}

/** Aqui vai deixar a imagem centralizada. Quando uma imagem √© muito grande, usamos o "width 40%" para diminuir a largura dele, "display:block" e  "margin: auto" para deixar a imagem centralizada.*/
main img.bugdroid{
    max-width: 320px;
    display: block;
    margin: auto;
}

main a{
    text-decoration: none;
    background-color: var(--cor3);
    color: var(--cor5);
    font-weight: bold;
    padding: 02px 6px;
}

main a:hover{
    text-decoration: underline;
    color: var(--cor4);
}

main a::after{
    content: 'üîó';
}

/** Aqui √© uma "gambiarra" para conseguirmos fazer com que o v√≠deo seja responsivel da melhor forma. Temos que usar o "POSITION" dentro do elemento DIV e dentro do elemento IFRAME para deixar o v√≠deo responsivel e claro, n√£o esquecer do WIDTH e HEIGHT e todo o restante tamb√©m. Pesquisar mais no  W3C.*/
div.video{
    background-color: var(--cor5);
    margin: 0px -20px 30px -20px;
    padding: 20px;
    padding-bottom: 58%;
    position: relative;
}

div.video > iframe{
    position: absolute;
    top: 5%;
    left: 5%;
    width: 90%;
    height: 90%;
}

aside{
    background-color: var(--cor1);
    box-shadow: 02px 03px 04px rgba(0, 0, 0, 0.158);
    border-radius: 10px;
    padding: 10px;
    
}

/** Eis aqui as tags que estava querendo para saber como o Guanabara havia feito. S√≥ pelos nomes voc√™ j√° consegue identificar o que √© o que. Esse "00A0" significa que ele vai dar um "ESPA√áO" e para o check mark n√£o ficar muito junto, por isso usamos. O problema que esse "espa√ßo" N√ÉO √â COMPAT√çVEL COM TODO TIPO DE NAVEGADOR. */
aside ul{
    list-style-type: '\1F5F8\00A0\00A0';
    list-style-position: inside;
    columns: 2;
}

/** POSSO USAR MARGIN NEGATIVA!*/
aside h3{
    background-color: var(--cor4);
    color: white;
    padding: 10px;
    margin: -10px -10px 0px -10px;
    border-radius: 10px 10px 0px 0px;
}

footer{
    text-align: center;
    background-color: var(--cor5);
    color: white;
    font-size: 0.9em;
    padding: 05px;
}

footer a{
    text-decoration: none;
    color: white;
    font-weight: bolder;
}

footer a:hover{
    text-decoration: underline;
    color: var(--cor1);
}

